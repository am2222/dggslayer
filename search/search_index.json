{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installing Documentations of IDEAS DGGS rendering package render spatial data. Documentations https://rdrr.io/github/thespatiallabatLaurier/dggslayer/ https://dggslayer.readthedocs.io/en/latest/ Install devtools :: install_github ( \"thespatiallabatLaurier/dggslayer\" ) Examples addNumericalDGGSLayer m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addNumericalDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions ) addNominalDGGSLayer m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) nominalLayerOptions <- list ( classNames = list ( c ( \"Evergreen Needleleaf Forests\" , 1 , \"#006300\" ), c ( \"Evergreen Broadleaf Forests\" , 2 , \"#006300\" ), c ( \"Deciduous Needleleaf Forests\" , 3 , \"#148c3d\" ), c ( \"Deciduous Broadleaf Forests\" , 4 , \"#1eab05\" ), c ( \"Mixed Forests\" , 5 , \"#5c752b\" ), c ( \"Closed Shrublands\" , 6 , \"#bad48f\" ), c ( \"Open Shrublands\" , 7 , \"#b39e2b\" ), c ( \"Woody Savannas\" , 8 , \"#b38a33\" ), c ( \"Savannas\" , 9 , \"#9c7554\" ), c ( \"Grasslands\" , 10 , \"#e1cf8a\" ), c ( \"Permanent Wetlands\" , 11 , \"#6ba38a\" ), c ( \"Croplands\" , 12 , \"#e6ae66\" ), c ( \"Urban and Built-up Lands\" , 13 , \"#dc2126\" ), c ( \"Cropland/Natural Vegetation Mosaics\" , 14 , \"#949c70\" ), c ( \"Permanent Snow and Ice\" , 15 , \"#fffaff\" ), c ( \"Barren\" , 16 , \"#a8abae\" ), c ( \"Water Bodies\" , 17 , \"#4c70a3\" ) )) m %>% addNominalDGGSLayer ( layer = \"MOD12Q1DATA\" , tid = '2003' , filter = \"key='MOD12Q1'\" , group = \"continuousLayer\" , options = nominalLayerOptions ) addContinuousDGGSLayer m <- leaflet () %>% \\ leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \\ \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addContinuousDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"Installing"},{"location":"#installing","text":"Documentations of IDEAS DGGS rendering package render spatial data.","title":"Installing"},{"location":"#documentations","text":"https://rdrr.io/github/thespatiallabatLaurier/dggslayer/ https://dggslayer.readthedocs.io/en/latest/","title":"Documentations"},{"location":"#install","text":"devtools :: install_github ( \"thespatiallabatLaurier/dggslayer\" )","title":"Install"},{"location":"#examples","text":"addNumericalDGGSLayer m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addNumericalDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions ) addNominalDGGSLayer m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) nominalLayerOptions <- list ( classNames = list ( c ( \"Evergreen Needleleaf Forests\" , 1 , \"#006300\" ), c ( \"Evergreen Broadleaf Forests\" , 2 , \"#006300\" ), c ( \"Deciduous Needleleaf Forests\" , 3 , \"#148c3d\" ), c ( \"Deciduous Broadleaf Forests\" , 4 , \"#1eab05\" ), c ( \"Mixed Forests\" , 5 , \"#5c752b\" ), c ( \"Closed Shrublands\" , 6 , \"#bad48f\" ), c ( \"Open Shrublands\" , 7 , \"#b39e2b\" ), c ( \"Woody Savannas\" , 8 , \"#b38a33\" ), c ( \"Savannas\" , 9 , \"#9c7554\" ), c ( \"Grasslands\" , 10 , \"#e1cf8a\" ), c ( \"Permanent Wetlands\" , 11 , \"#6ba38a\" ), c ( \"Croplands\" , 12 , \"#e6ae66\" ), c ( \"Urban and Built-up Lands\" , 13 , \"#dc2126\" ), c ( \"Cropland/Natural Vegetation Mosaics\" , 14 , \"#949c70\" ), c ( \"Permanent Snow and Ice\" , 15 , \"#fffaff\" ), c ( \"Barren\" , 16 , \"#a8abae\" ), c ( \"Water Bodies\" , 17 , \"#4c70a3\" ) )) m %>% addNominalDGGSLayer ( layer = \"MOD12Q1DATA\" , tid = '2003' , filter = \"key='MOD12Q1'\" , group = \"continuousLayer\" , options = nominalLayerOptions ) addContinuousDGGSLayer m <- leaflet () %>% \\ leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \\ \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addContinuousDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"Examples"},{"location":"addContinuousDGGSLayer/","text":"addContinuousDGGSLayer : addContinuousDGGSLayer Description Adds a DGGS Continious Type layer. Usage addContinuousDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsContinuousTileOptions () ) Arguments Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options legend options are colorScale A colorscale. it can be a vector of hex colors of chromajs colorscales like OrRd,YlGnBu,RdYlBu,Spectral addSymbologyControl Add Symbology controls to the legend, dafault is true disableOpacityControl show/hide opacity control in the legend Value leaflerR map object Examples m <- leaflet () %>% \\ leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \\ \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addContinuousDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"`addContinuousDGGSLayer`: addContinuousDGGSLayer"},{"location":"addContinuousDGGSLayer/#addcontinuousdggslayer-addcontinuousdggslayer","text":"","title":"addContinuousDGGSLayer: addContinuousDGGSLayer"},{"location":"addContinuousDGGSLayer/#description","text":"Adds a DGGS Continious Type layer.","title":"Description"},{"location":"addContinuousDGGSLayer/#usage","text":"addContinuousDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsContinuousTileOptions () )","title":"Usage"},{"location":"addContinuousDGGSLayer/#arguments","text":"Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options legend options are colorScale A colorscale. it can be a vector of hex colors of chromajs colorscales like OrRd,YlGnBu,RdYlBu,Spectral addSymbologyControl Add Symbology controls to the legend, dafault is true disableOpacityControl show/hide opacity control in the legend","title":"Arguments"},{"location":"addContinuousDGGSLayer/#value","text":"leaflerR map object","title":"Value"},{"location":"addContinuousDGGSLayer/#examples","text":"m <- leaflet () %>% \\ leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \\ \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addContinuousDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"Examples"},{"location":"addNominalDGGSLayer/","text":"addNominalDGGSLayer : addNominalDGGSLayer Description Adds a DGGS Nominal Type layer. Usage addNominalDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsNominalTileOptions () ) Arguments Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options The mandetory option for this type of the layer is classNames which is a 3dimentional list in this format c(\"Lable\",value,\"HexColor\") legend options are defaultColor Color that shows as default value when a key is not defined. A hex color and default is '#FFF' addSymbologyControl Add Symbology controls to the legend, dafault is true classNames A list of c(\"Lable\",value,\"HexColor\"), its mandatory disableOpacityControl show/hide opacity control in the legend Value leaflerR map object Examples m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) nominalLayerOptions <- list ( classNames = list ( c ( \"Evergreen Needleleaf Forests\" , 1 , \"#006300\" ), c ( \"Evergreen Broadleaf Forests\" , 2 , \"#006300\" ), c ( \"Deciduous Needleleaf Forests\" , 3 , \"#148c3d\" ), c ( \"Deciduous Broadleaf Forests\" , 4 , \"#1eab05\" ), c ( \"Mixed Forests\" , 5 , \"#5c752b\" ), c ( \"Closed Shrublands\" , 6 , \"#bad48f\" ), c ( \"Open Shrublands\" , 7 , \"#b39e2b\" ), c ( \"Woody Savannas\" , 8 , \"#b38a33\" ), c ( \"Savannas\" , 9 , \"#9c7554\" ), c ( \"Grasslands\" , 10 , \"#e1cf8a\" ), c ( \"Permanent Wetlands\" , 11 , \"#6ba38a\" ), c ( \"Croplands\" , 12 , \"#e6ae66\" ), c ( \"Urban and Built-up Lands\" , 13 , \"#dc2126\" ), c ( \"Cropland/Natural Vegetation Mosaics\" , 14 , \"#949c70\" ), c ( \"Permanent Snow and Ice\" , 15 , \"#fffaff\" ), c ( \"Barren\" , 16 , \"#a8abae\" ), c ( \"Water Bodies\" , 17 , \"#4c70a3\" ) )) m %>% addNominalDGGSLayer ( layer = \"MOD12Q1DATA\" , tid = '2003' , filter = \"key='MOD12Q1'\" , group = \"continuousLayer\" , options = nominalLayerOptions )","title":"`addNominalDGGSLayer`: addNominalDGGSLayer"},{"location":"addNominalDGGSLayer/#addnominaldggslayer-addnominaldggslayer","text":"","title":"addNominalDGGSLayer: addNominalDGGSLayer"},{"location":"addNominalDGGSLayer/#description","text":"Adds a DGGS Nominal Type layer.","title":"Description"},{"location":"addNominalDGGSLayer/#usage","text":"addNominalDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsNominalTileOptions () )","title":"Usage"},{"location":"addNominalDGGSLayer/#arguments","text":"Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options The mandetory option for this type of the layer is classNames which is a 3dimentional list in this format c(\"Lable\",value,\"HexColor\") legend options are defaultColor Color that shows as default value when a key is not defined. A hex color and default is '#FFF' addSymbologyControl Add Symbology controls to the legend, dafault is true classNames A list of c(\"Lable\",value,\"HexColor\"), its mandatory disableOpacityControl show/hide opacity control in the legend","title":"Arguments"},{"location":"addNominalDGGSLayer/#value","text":"leaflerR map object","title":"Value"},{"location":"addNominalDGGSLayer/#examples","text":"m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) nominalLayerOptions <- list ( classNames = list ( c ( \"Evergreen Needleleaf Forests\" , 1 , \"#006300\" ), c ( \"Evergreen Broadleaf Forests\" , 2 , \"#006300\" ), c ( \"Deciduous Needleleaf Forests\" , 3 , \"#148c3d\" ), c ( \"Deciduous Broadleaf Forests\" , 4 , \"#1eab05\" ), c ( \"Mixed Forests\" , 5 , \"#5c752b\" ), c ( \"Closed Shrublands\" , 6 , \"#bad48f\" ), c ( \"Open Shrublands\" , 7 , \"#b39e2b\" ), c ( \"Woody Savannas\" , 8 , \"#b38a33\" ), c ( \"Savannas\" , 9 , \"#9c7554\" ), c ( \"Grasslands\" , 10 , \"#e1cf8a\" ), c ( \"Permanent Wetlands\" , 11 , \"#6ba38a\" ), c ( \"Croplands\" , 12 , \"#e6ae66\" ), c ( \"Urban and Built-up Lands\" , 13 , \"#dc2126\" ), c ( \"Cropland/Natural Vegetation Mosaics\" , 14 , \"#949c70\" ), c ( \"Permanent Snow and Ice\" , 15 , \"#fffaff\" ), c ( \"Barren\" , 16 , \"#a8abae\" ), c ( \"Water Bodies\" , 17 , \"#4c70a3\" ) )) m %>% addNominalDGGSLayer ( layer = \"MOD12Q1DATA\" , tid = '2003' , filter = \"key='MOD12Q1'\" , group = \"continuousLayer\" , options = nominalLayerOptions )","title":"Examples"},{"location":"addNumericalDGGSLayer/","text":"addNumericalDGGSLayer : addNumericalDGGSLayer Description Adds a DGGS Numerical Type layer. Usage addNumericalDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsNumericalTileOptions () ) Arguments Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options legend options are colorScale A colorscale. it can be a vector of hex colors of chromajs colorscales like OrRd,YlGnBu,RdYlBu,Spectral addSymbologyControl Add Symbology controls to the legend, dafault is true disableOpacityControl show/hide opacity control in the legend classNumber Number of classes classificationType one of the EqInterval,StdDeviation,GeometricProgression,ArithmeticProgression Value leaflerR map object Examples m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addNumericalDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"`addNumericalDGGSLayer`: addNumericalDGGSLayer"},{"location":"addNumericalDGGSLayer/#addnumericaldggslayer-addnumericaldggslayer","text":"","title":"addNumericalDGGSLayer: addNumericalDGGSLayer"},{"location":"addNumericalDGGSLayer/#description","text":"Adds a DGGS Numerical Type layer.","title":"Description"},{"location":"addNumericalDGGSLayer/#usage","text":"addNumericalDGGSLayer ( map , layer , tid = NULL , filter = NULL , layerId = NULL , group = NULL , options = dggsNumericalTileOptions () )","title":"Usage"},{"location":"addNumericalDGGSLayer/#arguments","text":"Argument Description map a leaflet map layer the dataset name. it is the table name which has a dggid,key,tid,value structure in nz tid tid value. filter filter data, can be in a form of key='something', it is mostly an SQL where statement layerId the layerid same as leaflet layerid group groupid same as leaflet group id options legend options are colorScale A colorscale. it can be a vector of hex colors of chromajs colorscales like OrRd,YlGnBu,RdYlBu,Spectral addSymbologyControl Add Symbology controls to the legend, dafault is true disableOpacityControl show/hide opacity control in the legend classNumber Number of classes classificationType one of the EqInterval,StdDeviation,GeometricProgression,ArithmeticProgression","title":"Arguments"},{"location":"addNumericalDGGSLayer/#value","text":"leaflerR map object","title":"Value"},{"location":"addNumericalDGGSLayer/#examples","text":"m <- leaflet () %>% leaflet :: setView ( lng = -106.34 , lat = 56.13 , zoom = 2 ) %>% addMarkers ( lng = -106.34 , lat = 56.13 , popup = \"Canada\" ) continuousLayerOptions <- list ( colorScale = c ( \"OrRd\" )) m %>% addNumericalDGGSLayer ( layer = \"ANUSPLINE3\" , tid = '1950' , filter = \"key='MAX_TEMP'\" , group = \"nominalLayer\" , options = continuousLayerOptions )","title":"Examples"},{"location":"dggslayer-shiny/","text":"dggslayer-shiny : Shiny bindings for dggslayer Description Output and render functions for using dggslayer within Shiny applications and interactive Rmd documents. Usage dggslayerOutput ( outputId , width = \"100%\" , height = \"400px\" ) renderDggslayer ( expr , env = parent.frame (), quoted = FALSE ) Arguments Argument Description outputId output variable to read from width, height Must be a valid CSS unit (like '100%' , '400px' , 'auto' ) or a number, which will be coerced to a string and have 'px' appended. expr An expression that generates a dggslayer env The environment in which to evaluate expr . quoted Is expr a quoted expression (with quote() )? This is useful if you want to save an expression in a variable.","title":"`dggslayer-shiny`: Shiny bindings for dggslayer"},{"location":"dggslayer-shiny/#dggslayer-shiny-shiny-bindings-for-dggslayer","text":"","title":"dggslayer-shiny: Shiny bindings for dggslayer"},{"location":"dggslayer-shiny/#description","text":"Output and render functions for using dggslayer within Shiny applications and interactive Rmd documents.","title":"Description"},{"location":"dggslayer-shiny/#usage","text":"dggslayerOutput ( outputId , width = \"100%\" , height = \"400px\" ) renderDggslayer ( expr , env = parent.frame (), quoted = FALSE )","title":"Usage"},{"location":"dggslayer-shiny/#arguments","text":"Argument Description outputId output variable to read from width, height Must be a valid CSS unit (like '100%' , '400px' , 'auto' ) or a number, which will be coerced to a string and have 'px' appended. expr An expression that generates a dggslayer env The environment in which to evaluate expr . quoted Is expr a quoted expression (with quote() )? This is useful if you want to save an expression in a variable.","title":"Arguments"},{"location":"setServerAddress/","text":"setServerAddress : setServerAddress Description Configure Tileserves's Access URL. Usage setServerAddress ( map , server_URL ) Arguments Argument Description map a leaflet map server_URL URL of the server. This must be set if you are connecting to another server than IDEAS tile server Value leaflerR map object Examples m <- leaflet () %>% setServerAddress ( \\ \"https://spatial.wlu.ca/tileserver/\" )","title":"`setServerAddress`: setServerAddress"},{"location":"setServerAddress/#setserveraddress-setserveraddress","text":"","title":"setServerAddress: setServerAddress"},{"location":"setServerAddress/#description","text":"Configure Tileserves's Access URL.","title":"Description"},{"location":"setServerAddress/#usage","text":"setServerAddress ( map , server_URL )","title":"Usage"},{"location":"setServerAddress/#arguments","text":"Argument Description map a leaflet map server_URL URL of the server. This must be set if you are connecting to another server than IDEAS tile server","title":"Arguments"},{"location":"setServerAddress/#value","text":"leaflerR map object","title":"Value"},{"location":"setServerAddress/#examples","text":"m <- leaflet () %>% setServerAddress ( \\ \"https://spatial.wlu.ca/tileserver/\" )","title":"Examples"}]}